pie + geom_bar(width = 1) + coord_polar(theta = "y")
pie <- ggplot(Boston, aes(x = factor(1),fill = factor(rad)))
pie(tab)
stripchart(Boston$medv, method="j")
#
library("lattice")
stripplot (~medv, data=Boston , jitter.data=T) 6#
stripplot (~medv, data=Boston , jitter.data=T)
#
library ("ggplot2")
d <− ggplot(Boston, aes(x=medv, y=0))
stripchart(Boston$medv, method="j")
stripplot (~medv, data=Boston , jitter.data=T)
d <− ggplot(Boston, aes(x=medv, y=0))
d + geom_point(position=position_jitter(height=0.1))
d <- ggplot(Boston, aes(x=medv, y=0))
d + geom_point(position=position_jitter(height=0.1))
stripchart(Boston$medv, method="j")
boxplot(Boston$medv)
plot(Boston$medv)
boxplot(Boston$medv)
scatterplot(Boston$medv)
scatplot(Boston$medv)
plot(Boston$medv)
boxplot(Boston$medv)
summary(Boston$medv)
stem(Boston$medv)
stem(Boston$medv, scale=0.5)
library ("aplpack") stem.leaf (Boston$medv)
library ("aplpack")
install.packages('aplpack')
library ("aplpack")
library ("aplpack")
stem.leaf (Boston$medv)
stem(Boston$medv)
stem(Boston$medv, scale=0.5)
hist(Boston$medv)
rug(Boston$medv)
library("lattice")
histogram (~medv , data=Boston ) 8#
histogram (~medv , data=Boston )
ggplot(Boston , aes(x=medv)) + geom_histogram(binwidth=2)
boxplot(medv~rad ,data = Boston)
library ("ggplot2")
ggplot(Boston, aes(x=factor(rad), y=medv)) + geom_boxplot()
help('~')
bwplot (~medv | rad ,data = Boston)
boxplot(medv~rad ,data = Boston)
bwplot (~medv | rad ,data = Boston)
?boxplot
boxplot(medv~rad ,data = Boston)
id <− function (x) { return (x) ; }
args <- tapply(Boston$medv, Boston$rad, FUN=id)
id <- function (x) { return (x) ; }
args <- tapply(Boston$medv, Boston$rad, FUN=id)
args$names <- names(args)
names(args)[1] <- ’x’
names(args)[1] <- ’x’
names(args)[1] <- "x"
pdf("violin.pdf", bg="transparent", width=10, height=6)
do.call("vioplot", args)
title (main="Violin plot", xlab="rad", ylab="medv")
dev.off()
library('vioplot')
install.packages('vioplot')
id <- function (x) { return (x) ; }
library('vioplot')
args <- tapply(Boston$medv, Boston$rad, FUN=id)
args$names <- names(args)
names(args)[1] <- "x"
pdf("violin.pdf", bg="transparent", width=10, height=6)
do.call("vioplot", args)
title (main="Violin plot", xlab="rad", ylab="medv")
dev.off()
do.call("vioplot", args)
title (main="Violin plot", xlab="rad", ylab="medv")
install.packages('ash')
library ("ash")
ash <− ash1(bin1(Boston$medv))
plot(ash, type="s")
ash <- ash1(bin1(Boston$medv))
plot(ash, type="s")
?ash
?ash1
?bin1
ash <- ash1(Boston$medv)
plot(ash, type="s")
ash <- ash1(Boston$medv)
plot(ash, type="s")
ash <- ash1(Boston)
plot(ash, type="s")
ash <- ash1(bin1(Boston$medv))
plot(ash, type="s")
fhat <− density(Boston$medv)
fhat <- density(Boston$medv)
plot(fhat)
fhat <- density(Boston$medv)
plot(fhat)
densityplot (~medv, data = Boston)
ggplot(Boston , aes(x=medv)) + geom_density()
qqnorm(Boston$medv, pch=19, cex=0.5)
qqline(Boston$medv)
d <− ggplot(Boston , aes(sample=medv)) + stat_qq()
d + geom_abline( intercept = mean(Boston$medv) , 11 slope = sd(Boston$medv))
d <- ggplot(Boston , aes(sample=medv)) + stat_qq()
d + geom_abline( intercept = mean(Boston$medv) , 11 slope = sd(Boston$medv))
d <- ggplot(Boston , aes(sample=medv)) + stat_qq()
d + geom_abline(intercept = mean(Boston$medv), slope = sd(Boston$medv))
?qqnorm
qqplot(Boston$medv)
summary(Boston$crim)
sccrim <− scale(Boston$crim)
summary( sccrim )
summary(Boston$crim)
sccrim <- scale(Boston$crim)
summary( sccrim )
hist(Boston$crim)
spcrim <- basicPower ( testdata , −1)
hist(spcrim)
hist(Boston$crim)
spcrim <- basicPower ( testdata , -1)
hist(spcrim)
library("car")
spcrim <- basicPower ( testdata , -1)
hist(Boston$crim)
spcrim <- basicPower (Boston$crim , -1)
hist(spcrim)
qnorm(sccrim)
qqnorm(sccrim)
qqline(Boston$crim)
qqline(sccrim)
qqnorm(Boston$crim)
qqnorm(sccrim)
qqnorm(Boston$crim)
qqnorm(sccrim)
qqline(sccrim)
boxplot(sccrim)
indus <− Boston$indus/100 # precentages
indus <- Boston$indus/100 # precentages
hist(indus)
lindus <- logit(indus)
hist(lindus)
# Box−Cox
hist(Boston$crim)
bccrim <- bcPower(testdata , 0)
bccrim <- bcPower(Boston$crim , 0)
hist(bccrim)
hist(Boston$crim)
bccrim <- bcPower(Boston$crim , 0)
hist(bccrim)
?logit
chisq.test(table(Boston$rad))
ks.test(Boston$medv, "pnorm", mean=mean(Boston$medv), sd=sd(Boston$medv))
sd=sd(Boston$medv))
ks.test(Boston$medv, "pnorm", mean=mean(Boston$medv), sd=sd(Boston$medv))
library("nortest")
install.packages('nortest')
lillie.test (Boston$medv)
library("nortest")
lillie.test (Boston$medv)
?ks.test
cvm.test(Boston$medv)
ad.test(Boston$medv)
library ("DescTools")
JarqueBeraTest(Boston$medv)
qqnorm(Boston$medv)
qqline(Boston$medv)
hist(Boston$medv)
a <- scale(Boston$medv)
a <- scale(Boston$medv)
qqnorm(a)
qqline(a)
hist(a)
qqnorm(a)
qqline(a)
hist(a)
plot(a)
barplot(a)
hist(a)
JarqueBeraTest(a)
JarqueBeraTest(Boston$medv)
shapiro.test (Boston$medv)
ShapiroFranciaTest(Boston$medv)
boxplot (medv~rad , data=Boston , notch=T, varwidth=T)
tapply(Boston$medv, factor(Boston$rad), mean)
?tapply
plotmeans(medv~rad)
library(gplots)
install.packages(gplots)
install.packages(ggplots)
?plotmeans
??plotmeans
library(psych)
plotmeans(medv~rad)
error.bars(medv~rad)
error.bars(Boston$medv)
error.bars(Boston$rad)
error.bars(Boston)
error.bars(Boston$age)
mean(Boston$age)
ci(Boston$age)
sssd <- sd(Boston$age)
nnn <- length(Boston$age)
SEEE <- sssd/sqrt(nnn)
SEEE
?errbar
??errbar
library(Hmisc)
errorbar(Boston$age)
library(Hmisc)
errorbar(Boston$age)
errbar(Boston$age)
errbar(Boston$age,Boston$medv)
t.test(Boston$medv, mu=10)
t.test(Boston$medv, mu=10, var.equal = T)
t.test(Boston$age, mu=68, var.equal = T)
t.test(Boston$age, mu=68,5749, var.equal = T)
t.test(Boston$age, mu=68.5749, var.equal = T)
t.test(Boston$age, mu=90, var.equal = T)
t.test(Boston$age, mu=50, var.equal = F)
mmedv <− median(Boston$medv)
mmedv <- median(Boston$medv)
above <- tapply(Boston$medv>=mmedv, Boston$rad , sum)
below <- tapply(Boston$medv<mmedv, Boston$rad , sum)
tab <- rbind(below,above)
tab
chisq.test(tab)
?rbind
t.test(Boston$age, mu=50, paired=T)
t.test(a$age,b$age , paired=T)
a <- sample(1:10,Boston)
b <- sample(1:10,Boston)
t.test(a$age,b$age , paired=T)
?sample
a <- sample(Boston,10)
b <- sample(Boston,10)
t.test(a$age,b$age , paired=T)
a <- sample(Boston,1000)
a <- sample(Boston,100)
a <- sample(Boston,100, replace=T)
b <- sample(Boston,100, replace=T)
t.test(a$age, b$age, paired=T)
?t.test
t.test(a$age, paired=T)
t.test(a$age,10, paired=T)
t.test(a$age,100, paired=T)
t.test(a$age,b$age, paired=T)
t.test(a$age,mu=60, paired=T)
t.test(a$age,b$age,mu=60, paired=T)
View(b)
t.test(a$age,b$medv,mu=60, paired=T)
mean(a$age)
t.test(a$medv,b$rad, paired=T)
e
t.test(a$age,b$medv,mu=60, paired=T)
a <- sample(Boston,30, replace=T)
b <- sample(Boston,30, replace=T)
t.test(a$age,b$age,mu=10, paired=T)
t.test(a$age,b$age, paired=T)
summary(a)
summary(b)
summary(a$age)
summary(b$age)
a <- sample(Boston,100, replace=T)
b <- sample(Boston,100)
View(b)
?sample
a <- sample(100,Boston$age)
b <- sample(100,Boston$age)
t.test(a$age,b$age, paired=T)
summary(a$age)
summary(a)
summary(b)
t.test(a,b, paired=T)
t.test(a,b,paired=T,alt='less')
t.test(a,b,paired=T,alt='greater')
t.test(a,b,paired=T)
wilcox.test(Boston$medv[Boston$chas==0], Boston$medv[ Boston$chas==1])
wilcox.test (medv~chas , Boston)
tapply(Boston$medv, Boston$chas , var)
j <- jitter (rep(0, length(Boston$medv)))
j <- j-0.05∗(1+Boston$chas)
j <- j-0.05∗(1+Boston$chas)
j <- j-0.05*(1+Boston$chas)
plot(Boston$medv, j, ylim=c(−0.1, 1), pch=19, cex=0.4,col=1+Boston$chas , ylab="Ecdf")
y0 <- ecdf(Boston$medv[Boston$chas==0])
plot(y0, col="black", add=T, cex=0.5)
y1 <- ecdf(Boston$medv[Boston$chas==1])
plot(y1, col="red", add=T, cex=0.5)
j <- jitter (rep(0, length(Boston$medv)))
j <- j-0.05*(1+Boston$chas)
plot(Boston$medv, j, ylim=c(−0.1, 1), pch=19, cex=0.4,col=1+Boston$chas , ylab="Ecdf")
y0 <- ecdf(Boston$medv[Boston$chas==0])
plot(Boston$medv, j, ylim=c(-0.1, 1), pch=19, cex=0.4,col=1+Boston$chas , ylab="Ecdf")
y0 <- ecdf(Boston$medv[Boston$chas==0])
plot(y0, col="black", add=T, cex=0.5)
y1 <- ecdf(Boston$medv[Boston$chas==1])
plot(y1, col="red", add=T, cex=0.5)
plot(Boston$medv, j, ylim=c(-0.1, 1), pch=19, cex=0.4,col=1+Boston$chas , ylab="Ecdf")
j <- jitter (rep(0, length(Boston$medv)))
j <- j-0.05*(1+Boston$chas)
j <- j-0.05*(1+Boston$chas)
plot(Boston$medv, j, ylim=c(-0.1, 1), pch=19, cex=0.4,col=1+Boston$chas , ylab="Ecdf")
y0 <- ecdf(Boston$medv[Boston$chas==0])
plot(y0, col="black", add=T, cex=0.5)
y1 <- ecdf(Boston$medv[Boston$chas==1])
plot(y1, col="red", add=T, cex=0.5)
?spreadlevelplot
??spreadlevelplot
library(car)
spreadLevelPlot(Boston$medv)
spreadLevelPlot(Boston$medv~~Boston$rad)
spreadLevelPlot(Boston$medv~Boston$rad)
library(car)
library ("spdep")
install.packages(spdep)
install.packages('spdep')
library ("spdep")
data("boston")
plot ( boston.c$LON, boston.c$LAT,districts")
plot (Boston.c$LON, Boston.c$LAT,districts")
col <− ifelse(boston.c$CHAS==1, "red", "black")
col <- ifelse(boston.c$CHAS==1, "red", "black")
plot ( boston.c$LON, boston.c$LAT, main="Boston school districts", pch=19, col=col)
library("lattice")
xyplot (LAT~LON|CHAS, data=boston.c , pch=19)
d <−ggplot(boston.c , aes(x=LON, y=LAT, colour=CHAS))
d <- ggplot(boston.c , aes(x=LON, y=LAT, colour=CHAS))
d + geom_point(shape=19)
pdf("boston_pts.pdf", width=5, height=6)
plot ( boston.c$LON, boston.c$LAT, pch=19, asp=T,cex=0.4 , col=boston.c$CHAS)
dev.off ()
plot ( boston.c$LON, boston.c$LAT, pch=19, asp=T,cex=0.4 , col=boston.c$CHAS)
map <- get_map(location=c(−71.5, 42.1, −70.5, 42.6), source="osm")
map <- get_map(location=c(-71.5, 42.1, -70.5, 42.6), source="osm")
library ("ggmap")
install.packages(ggmap)
install.packages('ggmap')
install.packages("ggmap")
library ("ggmap")
map <- get_map(location=c(-71.5, 42.1, -70.5, 42.6), source="osm")
map <- get_map(location=c(-71.5, 42.1, -70.5, 42.6), source="osm")
pdf("boston_osm.pdf", width=5, height=6)
ggmap(map)
pdf("boston_pts.pdf", width=5, height=6)
plot ( boston.c$LON, boston.c$LAT, pch=19, asp=T,cex=0.4 , col=boston.c$CHAS)
d + geom_point(shape=19)
d <- ggplot(boston.c , aes(x=LON, y=LAT, colour=CHAS))
d + geom_point(shape=19)
Boston$lstat <- 2*round(Boston$lstat/2)
Boston$medv <- 2*round(Boston$medv/2)
sunflowerplot (medv~lstat , data=Boston)
cor <− cor(Boston[,c(−4,−9)])
cor <- cor(Boston[,c(-4,-9)])
heatmap(cor, revC=T, col=topo.colors(12)) 4#
heatmap(cor, revC=T, col=topo.colors(12))
library("lattice")
levelplot (cor , at=(−10:10)/10)
levelplot (cor , at=(-10:10)/10)
library ("ggplot2")
install.packages('reshape2')
install.packages("reshape2")
mcor <− melt(cor)
mcor <- melt(cor)
library ("reshape2")
mcor <- melt(cor)
d <- ggplot(mcor, aes(x=Var1, y=Var2, z=value))
d <- d+geom_tile(aes(fill=value))
d + scale_fill_gradient(low = "white", high = "steelblue")
d <- d+geom_tile(aes(fill=value))
d + scale_fill_gradient(low = "white", high = "steelblue")
cov ( Boston )
cov (Boston$medv, Boston$rad)
cov (Boston$medv, Boston$medv)
cov (Boston$rad, Boston$medv)
cov (Boston$age, Boston$medv)
cov (Boston$medv, Boston$age)
cor.test (Boston$lstat , Boston$medv)
cor.test (Boston$chas , Boston$rad , method="spearman")
cor.test (Boston$age , Boston$rad , method="spearman")
cor.test (Boston$age , Boston$medv , method="spearman")
Accident$mode <- ordered(Accident$mode, levels=levels (Accident$mode )[c(4,2,3,1)])
tab <- xtabs(Freq~mode+age, data=Accident)
tab
install.packages('vcdExtra')
library ("vcdExtra") # for Accident
library("devtools") # for source_...
install.packages('devtools')
library("devtools") # for source_...
Accident$mode <- ordered(Accident$mode, levels=levels (Accident$mode )[c(4,2,3,1)])
tab <- xtabs(Freq~mode+age, data=Accident)
tab
source_gist ("3665743" , sha1="9c4f2ccf91a88be5734b0a616156500add8acdb2")
calc.Sd(tab)
library(vcd)
chisq.test(table(Boston$chas, Boston$rad))
tab <- matrix(c(8,16,5,11) , nrow=2)
colnames(tab) <- c("after_yes", "after_no")
rownames(tab) <- c("before_yes", "before_no")
tab
# uses Edwards correction
mcnemar.test ( tab )
version
version
version
x <- c(1869.46,9128.53,16092.94)
y <- c(60.379,162.943,406.143)
yc <- c(0.060379,0.162943,0.406143)
ysd <- c(0.49,1.104,7.710)
y1 <- y[1]
ysd1 <- ysd[1]
y2 <- y[2]
ysd2 <- ysd[2]
y3 <- y[3]
ysd3 <- ysd[3]
plot(x,y, xlab = "distance", ylab="RTT")
abline(lm(y~x), col="red")
lines(lowess(x,y), col="blue")
cov(x,y)
cor(x,y)
library("Hmisc")
errbar(x,y, y+ysd, y-ysd,cap=.015,ylim=c(0,450), xlab = "distance", ylab="RTT")
packages.install("Hmisc")
package.install("Hmisc")
install.packages("Hmisc")
library("Hmisc")
errbar(x,y, y+ysd, y-ysd,cap=.015,ylim=c(0,450), xlab = "distance", ylab="RTT")
errbar(0,y1, y1+ysd1, y1-ysd1,cap=.015,ylim=c(59,62), xlab = "distance", ylab="RTT")
errbar(0,y2, y2+ysd2, y2-ysd2,cap=.015,ylim=c(160,165), xlab = "distance", ylab="RTT")
errbar(0,y3, y3+ysd3, y3-ysd3,cap=.015,ylim=c(390,420), xlab = "distance", ylab="RTT")
Tier             <- c(1:10)
Motivstaerke     <- c(1,3,5,7,9,11,13,15,17,19)
Zeit             <- c(120,110,70,90,50,60,60,80,90,90)
Motivstaerke_quad <- Motivstaerke**2
out <- lm(Zeit ~ Motivstaerke + Motivstaerke_quad)
summary(out)
plot(out)
plot(Motivstaerke,out$fitted.values,type="b"))
plot(Motivstaerke,out$fitted.values,type="b")
setwd("/tracking_detectionEngine_20160616")
install.packages('jug')
install.packages("jug")
install.packages('jug')
detectTrackingImages <- function(){
detectionModel <- readRDS("model_c50_201705.rds")
#connection <- file("example_data/imageData.json")
connection <- file("input.json")
outConnection <- stdout()
detectTracking(connection, detectionModel, outConnection)
}
source("detectionEngine.R")
pwd
pwd()
wd()
/Users/Ben/Desktop/Master Thesis/MT_e-mail_prevention/detectionEngine/tracking_detectionEngine_20160616
setwd('/Users/Ben/Desktop/Master Thesis/MT_e-mail_prevention/detectionEngine/tracking_detectionEngine_20160616')
source("detectionEngine.R")
source("feature_extraction.R")
source("helperfunctions.R")
detectTrackingImages <- function(){
detectionModel <- readRDS("model_c50_201705.rds")
#connection <- file("example_data/imageData.json")
connection <- file("input.json")
outConnection <- stdout()
detectTracking(connection, detectionModel, outConnection)
}
detectTrackingImages()
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages <- function(){
detectionModel <- readRDS("model_c50_201705.rds")
#connection <- file("example_data/imageData.json")
connection <- file("input.json")
outConnection <- stdout()
detectTracking(connection, detectionModel, outConnection)
}
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
detectTrackingImages()
detectTrackingImages <- function(){
detectionModel <- readRDS("model_c50_201705.rds")
#connection <- file("example_data/imageData.json")
connection <- file("input.json")
outConnection <- stdout()
detectTracking(connection, detectionModel, outConnection)
}
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
source("detectionEngine.R")
detectTrackingImages()
detectTrackingImages()
